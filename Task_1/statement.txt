Задача:

1) Загрузить книгу с https://www.gutenberg.org/

2) Программа должна прочитать файл и показать число вхождений каждого слова файла (в порядке убывания числа вхождений).

3) Использовать WinAPI:

CreateFile - открыть файл
GetFileSizeEx - получить размер файла -> Size
Text = new char[Size+1] - выделить буфер
ReadFile - прочитать файл в буфер
CloseHandle - закрыть файл
delete[] - удалить буфер

Программа должна показать время выполнения в миллисекундах.

Свой менеджер памяти для std:map должен быть реализован.

Требования:

Не использовать объекты "string".
Использовать char* для строк.
Использовать только буфер Text, другие строки не выделять.

Менеджер памяти должен выделить большой буфер (например, 1MB).
Далее данный буфер должен использоватся для обработки запросов выделения памяти (при работе с map).
То есть, при первом запросе выделяем место в начале буфера. 
Свободное место уменьшается.
При последующем запросе используем начало свободного места.
И так далее.
Если место в буфере закончится, нужно выделить еще один буфер и так далее.
Все буферы должны быть освобождены в конце программы автоматически.
(Это означает, что список этих буферов должен где-то быть, начало буфера может быть использовано для полей связи элементов списка, а место
для выделения памяти начинаться после этих полей).

4) Реализовать альтернативную программу, которая использует map<string, size_t>, без своего менеджера памяти
и сравнить время выполнения. Тестовый текстовый файл должен быть больше 1 Мб.

Смысл задачи:

Сравним производительность при использовании стандартного аллокатора и со своим простым аллокатором.

Примечание 1.
Буфер выделяем new char[Size+1], чтобы вставить 0 в конце буфера.

Примечание 2.
Не забывать инициализировать переменные, если это нужно в конкретном случае.

Этапы решения задачи.

1) Написать программу которая открывает файл, определяет его размер и выводит на экран.

2) Добавить возможность чтения содержимого файла в переменную Text.

3) Добавить возможность парсинга буфера Text и выделения в нем слов.

4) Добавить возможность добавления слов в map (подсчет числа вхождений с использованием map) и вывода результатов.
Начало замера времени после чтения файла.
Конец замера времени перед выводом результатов.
(Замеряем только сам алгоритм, ввод-вывод исключаем).

5) Реализовать вторую программу, где используется map<string,size_t>.
Сравнить времена работы.

6) Добавить возможность вывода результата в отсортированном виде.
